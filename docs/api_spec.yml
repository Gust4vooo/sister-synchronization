openapi: 3.0.0
info:
  title: Distributed System API Documentation
  description: API documentation for distributed lock manager, queue, and cache system
  version: 1.0.0

servers:
  - url: http://localhost:{port}
    description: Local development server
    variables:
      port:
        default: '8000'
        description: Server port

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        status:
          type: string
          description: Error status
    
    LockRequest:
      type: object
      required:
        - action
        - lock_name
        - client_id
      properties:
        action:
          type: string
          enum: [ACQUIRE_SHARED, ACQUIRE_EXCLUSIVE, RELEASE]
          description: Type of lock operation
        lock_name:
          type: string
          description: Name of the lock to operate on
        client_id:
          type: string
          description: Unique identifier of the client requesting the lock
    
    QueueMessage:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Message content to be queued
        msg_id:
          type: string
          description: Unique message identifier (generated by server)
    
    MessageAck:
      type: object
      required:
        - msg_id
      properties:
        msg_id:
          type: string
          description: ID of the message being acknowledged
    
    CacheMetrics:
      type: object
      properties:
        cache_hits:
          type: integer
          description: Number of cache hits
        cache_misses:
          type: integer
          description: Number of cache misses
        writes_received:
          type: integer
          description: Number of write operations received
        invalidations_sent:
          type: integer
          description: Number of invalidation messages sent
        invalidations_received:
          type: integer
          description: Number of invalidation messages received

paths:
  # Lock Manager Endpoints
  /lock:
    post:
      summary: Request to acquire or release a lock
      description: Handle lock operations (acquire shared/exclusive or release)
      tags:
        - Lock Manager
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LockRequest'
      responses:
        '202':
          description: Lock operation proposal accepted by leader
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: Bad request (not a leader or missing parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '408':
          description: Request timed out while waiting for lock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '423':
          description: Locked (deadlock detected)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /status:
    get:
      summary: Get current Raft status
      description: Returns the current state, term, and other Raft-related information
      tags:
        - Lock Manager
      responses:
        '200':
          description: Current Raft status
          content:
            application/json:
              schema:
                type: object
                properties:
                  state:
                    type: string
                    enum: [follower, candidate, leader]
                  current_term:
                    type: integer
  
  # Queue Endpoints
  /produce:
    post:
      summary: Produce a new message to the queue
      description: Add a new message to the distributed queue
      tags:
        - Queue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueueMessage'
      responses:
        '200':
          description: Message successfully received and persisted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /consume:
    get:
      summary: Consume a message from the queue
      description: Retrieve and remove the next message from the queue
      tags:
        - Queue
      responses:
        '200':
          description: Successfully retrieved message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueMessage'
        '204':
          description: Queue is empty
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    nullable: true
                  status:
                    type: string

  /ack:
    post:
      summary: Acknowledge message processing
      description: Confirm that a message has been processed and can be removed
      tags:
        - Queue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageAck'
      responses:
        '200':
          description: Message successfully acknowledged
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '404':
          description: Message ID not found or already acknowledged
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Cache Endpoints
  /read/{key}:
    get:
      summary: Read value from cache
      description: Retrieve a value from the cache or underlying storage
      tags:
        - Cache
      parameters:
        - in: path
          name: key
          required: true
          schema:
            type: string
          description: Key to read
      responses:
        '200':
          description: Value successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    type: string
                  value:
                    type: string
                  source:
                    type: string
                    enum: [cache, redis]
        '404':
          description: Key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /write:
    post:
      summary: Write value to cache
      description: Write a value to the cache and propagate to other nodes
      tags:
        - Cache
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - key
                - value
              properties:
                key:
                  type: string
                value:
                  type: string
      responses:
        '200':
          description: Write successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string

  /invalidate:
    post:
      summary: Invalidate cache entry
      description: Mark a cache entry as invalid (internal endpoint)
      tags:
        - Cache
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - key
              properties:
                key:
                  type: string
      responses:
        '200':
          description: Invalidation acknowledged
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string

  /metrics:
    get:
      summary: Get cache metrics
      description: Retrieve cache performance metrics
      tags:
        - Cache
      responses:
        '200':
          description: Cache metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheMetrics'
